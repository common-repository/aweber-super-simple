<?php
class Aweber
{
	var $version = 0.1;
	var $siteurl = '';
	var $plugindir = '';
	var $installed = false;
	var $post = array('register' => false, 'comment' => false);
	var $formid = '';
	var $adtracking = '';
	// "unit" is the name of the aweber list
	var $unit = '';
	var $table = 'aweber';
	var $sub = false;
	var $email = '';
	var $name = '';
	var $alreadysubscribed = '';
	
	
	// Option for whether we want to 
	// display a subscription checkbox
	// when user registers.
	var $subscribe = '';
	var $registration_greeting = '';
	
	var $defaultterms = array();

	function Aweber() {
	}

	function hook() {
		
		/** 
		 * @todo This installation check needs to go away.
		 * It may be something held over from very early
		 * days of WordPress.
		 */
		// installed or not
		$this->installed = get_option('awss_version') == $this->version;
		
		// This is going away soon.
		// awss_actions is either "register" or "comment"
		// Update: comment registration removed from this version.
		$actions = explode(',', get_option('awss_actions'));
		
		foreach ( $actions as $a ) {
			$this->post[$a] = true;
		}

		$t = explode(',', get_option('awss_defaultterms'));
		foreach ( $t as $h ) {
			$this->defaultterms[$h] = true;
		}
		
        $this->subscribe = get_option('awss_subscribe');
		$this->registration_greeting = get_option('awss_registration_greeting');
		
		$this->formid = get_option('awss_formid');
		$this->unit = get_option('awss_unit');
		$this->adtracking = get_option('awss_adtracking');

		add_action('activate_aweber-super-simple/aweber-super-simple.php', array(&$this, 'install'));
		add_action('deactivate_aweber-super-simple/aweber-super-simple.php', array(&$this, 'uninstall'));

		if ($this->installed) {
		    add_action('admin_menu', array(&$this, 'adminMenu'));
			add_action('user_register', array(&$this, 'register'));
			add_action('register_form', array(&$this, 'display_subscription_checkbox'));
		}

		// plugin directories
		$this->plugindir = dirname(__file__) . '/';
		$this->siteurl = get_option('siteurl'); // . '/x.php';
		// Not used?
    	$this->optionsurl = get_option('siteurl') . '/wp-admin/options-general.php?page=awss';

		// database
		global $wpdb;
		$this->table = $wpdb->prefix . $this->table;
		
	}  // End of hook
	

	function install() {
		
		if ($this->installed) {
			return;
		}

		global $wpdb;
		$wpdb->query("CREATE TABLE {$wpdb->prefix}aweber(`email` VARCHAR( 255 ) NOT NULL ,
                                    `when` DATETIME NOT NULL , PRIMARY KEY ( `email` ))");

		add_option('awss_version', $this->version);
		add_option('awss_formid', '');
		add_option('awss_adtracking', '');
		add_option('awss_unit', '');
		add_option('awss_subscribe','');
		add_option('awss_alreadysubscribed','');
		add_option('awss_registration_greeting', 'I want the newsletter, too.');
		add_option('awss_defaultterms', '');
		// @todo Get rid of actions option.
		//add_option('awss_actions', 'register,comment');
		add_option('awss_actions', '');
		$this->installed = true;
	}


	function uninstall() {
		
		global $wpdb;
        $wpdb->query("DROP TABLE {$wpdb->prefix}aweber");
		delete_option('awss_version');

        /**
         * @todo Smart deactivation in a future version.
         */
        /*
		delete_option('awss_adtracking');
		delete_option('awss_defaultterms');
		*/
		delete_option('awss_showterms');
		/*
		 delete_option('awss_subscribe');
		delete_option('awss_registration_greeting');
		delete_option('awss_formid');
		delete_option('awss_unit');
		delete_option('awss_actions');
		*/
		
	}


	function adminMenu() {
		add_submenu_page('options-general.php', 'Aweber', 'AWeber Super Simple', 10, 'awss', array(&$this, 'admin'));
	}

	function admin() {
       require("aweber_admin_function.php");
	}

	/**
	 * This is for the blog registration widget.
	 * @return nothing
	 * @param object $x[optional]
	 */
	function display_subscription_checkbox($x = null) {
		if ($this->subscribe) {
			echo '<p><input type="checkbox" name="agree_terms" value="1" ';
			if ($this->defaultterms['greeting']) {
				echo ' checked="checked"';
			}
			echo ' /> &nbsp;&nbsp;';
			echo html_entity_decode($this->registration_greeting).'</p>';
		}
	}
	
    /**
     * The register function takes care of registering the user with 
     * both the WP installation and AWeber.  It could use to 
     * be refactored.
     * 
     * The call is registered via add_action on initialization.
     * 
     * @return nothing
     * @param object $id of user, generated by WordPress.
     */
	function register($id) {

		global $wpdb;

        /**
         * What are the conditions triggering this return?
		 * This is either the check box of "terms" or it's
		 * left over from comment handling.
		 * 
		 * @todo Rework this into an option called something like
		 * 'want_newsletter'.  If Terms and Conditions are 
		 * later required, that can be handled then.
         */
		if (!$this->post['register']) {
			//return;
		}
		
		// get user info
		$id = intval($id);
		$user = $wpdb->get_row("SELECT * FROM $wpdb->users WHERE ID=$id");

		// check if this email was submitted to aweber already
		// It shouldn't matter whether they are already registered...
		// having the resubscribe let's you pitch them again from 
		// the "already subscribed" page.
		//
		// Also, somewhere in here, we are blog registering twice when there
		// is no user email in the aweber table.  That's no good.
		/**
		 * @todo Function needs name change s/ExistingEmail/email_exists/
		 * @todo Conditional if needs to be switched: 
		 * if (email_exists) {
		 *    return; 
		 * }
		 *  would be much cleaner.
		 */
		if ( !$this->ExistingEmail($user->user_email) ) {
						
			// send notifications
			//wp_new_user_notification($id, $user_pass);	// use this by itself if using pluggable.php function (sends email from wordpress@domain.com)
			wp_new_user_notification($id, ''); // this notifies admin only (no password is passed)

            // Redundant, save useful code for later reference.
			// include('aweber_email.php');
			// do the form
			// @todo: do some preprocessing here before the function call.
			// Create the location argument, and pass in the alreadysubscribed url
			$location = get_option('siteurl')."/wp-login.php?checkemail=registered";
			if (get_option('awss_alreadysubscribed') == '') {
				$this->alreadysubscribed = $location;
			} else {
				$this->alreadysubscribed = get_option('awss_alreadysubscribed');
			}
			$this->AweberForm($user->user_email, $user->user_login, $location, $this->alreadysubscribed);
		}
	}


    /**
     * The plugin stores the registered users data in a table.
     * If the user's email address is already in the table, but the
     * user is not registered for the blog, blog registration proceeds,
     * email registration will silently "fail."
     *
     * @todo: Change this behavior to exploit AWeber's "Already Subscribed"
     * capabilities.  That way users can be pitched if they resubscribed.
     *
     * @return true if registration produced an email already in the
     * aweber table, false otherwise.
     * @param object $email address of person registering.
     */
    function ExistingEmail($email) {
        global $wpdb;
    
        $qe = $wpdb->escape(strtolower($email));
        $prev = $wpdb->get_row("SELECT * FROM $this->table WHERE LOWER(email)='$qe'");
        if ($prev) {
            return true;
        }
        return false;
    }

    /**
     *
     * @return Script finishes with AWeber submission.
     * @param object $email address of person who wants to sign up for newsletter
     * @param object $name of person wanting newsletter
     * @param object $location Redirection location, where to send the
     * user after they register for the blog.
     */
    function AweberForm($email, $name, $location, $alreadysubscribed) {
    
        global $wpdb;
        $qe = $wpdb->escape(strtolower($email));
    
        // This should be a superfluous call, shouldn't
        // even get to the enclosing function if user email
        // exists.
        if ($this->ExistingEmail($email)) {
            return;
        }
        $r = $wpdb->query("INSERT INTO $this->table (`email`,`when`) VALUES('$qe', NOW())");
        /**
         * From the PHP Manual, because I always forget...
         * "When a file is included, parsing drops out of PHP mode and
         * into HTML mode at the beginning of the target file,
         * and resumes again at the end."
         */
        require ("aweber_html_form.php");
        exit ();
    }



    /**
     * Not sure this is necessary function.  Looks like a
     * holdover from the dinosaur days of early WordPess.
     *
     * @todo Find a built-in error handling function, if
     * any, in the WordPress API.
     *
     * @return none, exits.
     * @param object $message describing error.
     */
    function error($message) {
    	
        global $wp_locale;
    
        while (ob_get_level())
        ob_end_clean();
    
        @nocache_headers();
        @header('Content-Type: text/html; charset=utf-8');
    
        $message = "<p>$message</p>";
    
        if (defined('WP_SITEURL') && '' != WP_SITEURL)
        $admin_dir = WP_SITEURL.'/wp-admin/';
        elseif (function_exists('get_bloginfo') && '' != get_bloginfo('wpurl'))
        $admin_dir = get_bloginfo('wpurl').'/wp-admin/';
        elseif (strpos($_SERVER['PHP_SELF'], 'wp-admin') !== false)
        $admin_dir = '';
        else
            $admin_dir = 'wp-admin/';
    
        if ( empty($title)) {
            if (function_exists('__'))
                $title = __('WordPress &rsaquo; Error');
        else
            $title = 'WordPress &rsaquo; Error';
        }
    
        require ("aweber_error_form.php");
        exit ();
    }


}
?>